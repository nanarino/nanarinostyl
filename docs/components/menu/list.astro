---
import prefix from "docs/scripts/prefix"
import type { page, menu } from "docs/scripts/server/menu"
interface Props {
    menu: Array<page | menu>
    base?: string
}
const { menu } = Astro.props
const base = Astro.props.base ?? ""
const getName = (path: string) => path?.match?.(/[^/]*$/)?.[0]
---

<ul class={`${prefix}-menu`}>
    {
        menu.map(item => {
            /**
             * 当前菜单
             */
            if (
                Array.isArray((item as menu).children) &&
                (item as menu).children.length > 0
            ) {
                return (
                    <li
                        class={`${prefix}-menu-submenu`}
                        style="order:1"
                        data-folded={
                            /**
                             * 判断是否需要折叠菜单
                             */
                            !RegExp(`^${base}${item.path}`).test(
                                Astro.url.pathname
                            )
                        }
                    >
                        <div
                            class={`${prefix}-menu-submenu-title`}
                            onclick="this.parentElement.toggleAttribute('data-folded')"
                        >
                            <span>{getName(item.path)}</span>
                            <i class={`${prefix}-menu-submenu-title-arrow`} />
                        </div>
                        <Astro.self
                            menu={(item as menu).children}
                            base={base}
                        />
                    </li>
                )
            }
            /**
             * 当前页面
             */
            if (RegExp(`^${base}${item.path}\/?$`).test(Astro.url.pathname)) {
                return (
                    <li
                        class={`${prefix}-menu-item ${prefix}-watermark`}
                        data-selected
                        style={{
                            order: getName(item.path) ? 1 : 0,
                            "--opacity-watermark": 1,
                        }}
                    >
                        {getName(item.path) || "readme"}
                    </li>
                )
            }
            /**
             * 其他页面
             */
            return (
                <li
                    class={`${prefix}-menu-item`}
                    style={{ order: getName(item.path) ? 1 : 0 }}
                >
                    <a
                        class={`${prefix}-menu-item-link`}
                        href={base + item.path}
                    >
                        {getName(item.path) || "readme"}
                    </a>
                </li>
            )
        })
    }
</ul>
